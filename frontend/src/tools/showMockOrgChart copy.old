import 'src/main/components/page/orgChart/orgChart';

import {html, LitElement, TemplateResult} from "lit";
import {customElement, property, state} from "lit/decorators.js";
import {OrgPlannerAppServices} from "src/main/components/app/orgPlannerAppServices";
import {OrgPlannerAppServicesConstants} from 'src/main/components/app/orgPlannerAppServicesConstants';
import {OrgPlannerAppState} from "src/main/components/app/orgPlannerAppState";
import {FileService} from 'src/main/jscore/fileService';
import {OrgPlanner} from "src/main/model/orgPlanner";
import {OrgPlannerImportService} from 'src/main/model/orgPlannerImportService';
import {ServiceManager} from 'src/main/service/framework/ServiceManager';
import {ServiceManagerFactory} from 'src/main/service/framework/ServiceManagerFactory';

@customElement('mock-org-planner')
class MockOrgPlannerElement extends LitElement
{
    @property()
    public readonly planningModeEnabled = false;

    private _orgPlanner?: OrgPlanner;
    private _appState: OrgPlannerAppState = new OrgPlannerAppState();

    constructor()
    {
        super();
    }

    @state()
    private get orgPlanner(): OrgPlanner
    {
        if (!this._orgPlanner)
        {
            throw Error('Attempting to retrieve orgPlanner before it is created');
        }

        return this._orgPlanner;
    }

    private set orgPlanner(value: OrgPlanner)
    {
        const oldValue = this._orgPlanner;
        this._orgPlanner = value;
        this.requestUpdate('orgPlanner', oldValue);
    }

    connectedCallback(): void
    {
        super.connectedCallback();

        OrgPlannerAppServices.initServices();

        const queryString = window.location.search;
        const urlParams = new URLSearchParams(queryString);
        const mockOrgTree = urlParams.get("mockOrg");
        if (!mockOrgTree)
        {
            throw new Error("Mock org query param not provided");
        }

        const mockOrgTreeURL = `generated_orgs/${mockOrgTree}.json`;
        const serviceManager: ServiceManager = ServiceManagerFactory.getInstance().getServiceManager();

        const fileService = serviceManager.getService(OrgPlannerAppServicesConstants.FILE_SERVICE) as FileService;
        const orgJSON = fileService.readFileSync(mockOrgTreeURL);
        const orgPlannerImportService =
            serviceManager.getService(OrgPlannerAppServicesConstants.ORG_PLANNER_IMPORT_SERVICE) as
            OrgPlannerImportService;
        this.orgPlanner = orgPlannerImportService.importSync(orgJSON);

        this._appState = new OrgPlannerAppState();
    }

    onMockOrgChange(event: Event): void
    {
        console.log("Got it!");
    }

    render(): TemplateResult
    {
        return html`
            <org-chart data-id="org_chart" .orgStructure=${
            this.orgPlanner.presentOrg!.orgDataCore.orgStructure} .colorTheme=${
            this.orgPlanner.settings.colorTheme} readOnly="true" @onMockOrgChange=${this.onMockOrgChange}></org-chart>
        `;
    }

    get appState(): OrgPlannerAppState
    {
        return this._appState;
    }
}

@customElement('mock-org-list')
class MockOrgListElement extends LitElement
{
    private _mockOrgList: string[] = [];

    @property()
    get mockOrgList(): string[]
    {
        return this._mockOrgList;
    }

    set mockOrgList(orgListToSet: string[])
    {
        const oldValue = this._mockOrgList;
        this._mockOrgList = orgListToSet;
        this.requestUpdate('orgPlanner', oldValue);
    }

    connectedCallback(): void
    {
        super.connectedCallback();

        const mockOrgListFile = 'generated_orgs/mock_org_list.txt';

        fetch(mockOrgListFile)
            .then(response => response.text())
            .then(txt => {
                const mockOrgFiles: string[] = txt.split('\n');
                this.mockOrgList = mockOrgFiles;
            })
            .catch(err => console.error(`Error reading directory: ${err}`));
    }

    handleChange(event: Event): void
    {
        const target = event.target as HTMLInputElement;
        const value = target.value;

        let newURL = window.document.location.href.split('?')[0];
        newURL += "?mockOrg=" + value.split('.')[0];
        window.document.location = newURL;
        /*const customerEvent =
            new CustomEvent<ChangeMockOrgEvent>("onMockOrgChange", {bubbles : true, detail : {newMockOrg : value}});
        this.dispatchEvent(customerEvent);*/
    }

    render(): TemplateResult
    {
        return html`
            <form>
                <select id="mock_org_list" name="mock_org_list" @change=${this.handleChange}>
                    ${
            this.mockOrgList.map((nextMockOrg) => html`<option value="${nextMockOrg}">${nextMockOrg}</option>`)}
                </select>
            </form>
        `;
    }
}

declare global
{
    interface HTMLElementTagNameMap
    {
        'mock-org-planner': MockOrgPlannerElement;
        'mock-org-list': MockOrgListElement;
    }
}

export {MockOrgPlannerElement as MockOrgPlanner};
